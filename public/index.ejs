<%
if(!isset(typeof settings))
{
    settings = {};
}
let MENU_SITE = "HOME";
%>
<!doctype html>
<html>
    <head>
    <meta charset="utf-8">
    <style>
        body
        {
            --mainColor:<%= palette.mainColor %>;
            --secondaryMainColor:<%= palette.secondaryMainColor %>;
            --fontColorLight:<%= palette.fontColorLight %>;
            --fontColorDark:<%= palette.fontColorDark %>;
            --fillColor:<%= palette.fillColor %>;
        }
    </style>
    <link rel="stylesheet" type="text/css" href="CSS/index.css">    
    <link rel="stylesheet" type="text/css" href="CSS/status.css">  
    <link rel="stylesheet" type="text/css" href="CSS/ranking.css"> 
    <link rel="stylesheet" type="text/css" href="CSS/control.css">
    <link rel="stylesheet" type="text/css" href="CSS/media.css">    
    <link rel="stylesheet" type="text/css" href="CSS/menu.css">            
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="icon" href="images/tabIcon.png">
    <title><%= settings.serverName %></title>
    <style>
        #header
        {
            background:url(images/<%= heroImage %>);
            background-size:cover;
            background-position:50% 50%;            
        }
    </style>
    </head>
    <body>
    <% include imports/menu.ejs %>
    <header id="header">
        <div id="fade"></div>
        <div id="headerContent" class="maxWidth">
            <div id="headerInfo">
                <h1><%= settings.serverName %></h1>
                <p>V83 Maplestory private serverName</p>
                <div class="btn-tilted btn-green"><a href="#">Play</a></div>
                <% if(!isset(typeof user)){ %><div class="btn-tilted btn-blue"><a href="#">Register</a></div><% } %>
            </div>
            <div id="snail"></div> 
            <div id="stump"></div>
            <div id="mushroom"></div>
        </div>
    </header>
    <section id="content" class="maxWidth">
        <div class="block smallBlock">
            <h3 class="blockHeader">
            <svg x="0px" y="0px"
                width="100px" height="100px" viewBox="0 0 100 100" style="enable-background:new 0 0 100 100;" xml:space="preserve">
                <polyline class="st0" points="10.542,73.086 35.741,47.887 52.863,65.012 85.788,32.085 "/>
            </svg>
            <span>Server Status</span></h3>
            <% include panels/status.ejs %>
        </div>
        <div class="block middleBlock">
            <h3 class="blockHeader">News</h3>
        </div>
        <div class="block smallBlock">
            <h3 class="blockHeader">
            <svg x="0px" y="0px"
                width="100px" height="100px" viewBox="0 0 100 100" style="enable-background:new 0 0 100 100;" xml:space="preserve">
            <line class="st0" x1="16.628" y1="14.219" x2="16.628" y2="85.781"/>
            <line class="st0" x1="50.001" y1="14.219" x2="50.001" y2="85.781"/>
            <line class="st0" x1="83.372" y1="14.219" x2="83.372" y2="85.781"/>
            <circle class="st0" cx="16.628" cy="23.738" r="6"/>
            <circle class="st0" cx="50" cy="47.32" r="6"/>
            <circle class="st0" cx="83.372" cy="73.838" r="6"/>
            </svg>
            <span>Control Panel</span></h3>
            <% include panels/control.ejs %>
        </div>
        <div class="block middleBlock">
            <h3 class="blockHeader">
            <svg x="0px" y="0px" width="100px"
            height="100px" viewBox="0 0 100 100" style="enable-background:new 0 0 100 100;" xml:space="preserve">
                <g id="Layer_1">
                <path class="st2" d="M45.904,76.568"/>
                <polyline class="st0" points="45.854,56.029 45.854,76.1 32.021,76.1 32.021,91.154 50.875,91.154 50.313,91.154 69.166,91.154 
                69.166,76.1 55.333,76.1 55.333,56.029 	"/>
                <line class="st1" x1="45.854" y1="76.1" x2="55.333" y2="76.1"/>
                </g>
                <g id="Layer_2">
                <path class="st0" d="M50.594,8.846H31.74c0,0,0,0,0,23.918c0,23.919,18.854,24.294,18.854,24.294s18.854-0.375,18.854-24.294
                c0-23.918,0-23.918,0-23.918H50.594z"/>
                <path class="st0" d="M68.259,42.167c0,0,15.352,1.947,15.352-12.499s0-17.353,0-17.353H69.447"/>
                <path class="st0" d="M31.74,42.168c0,0-15.352,1.945-15.352-12.499c0-14.445,0-17.353,0-17.353H31.74"/>
                </g>
            </svg>
            <span>Ranking</span></h3>
            <% include panels/ranking.ejs %>
        </div>      
    </section>
    <script>
        let mushroom = document.getElementById("mushroom");
        let stump = document.getElementById("stump");
        let snail = document.getElementById("snail");
        let header = document.getElementById("header");
        let moveables = {mushroom:mushroom,stump:stump,snail:snail};
        let objectPositions = {mushroom:{x:0,y:0},snail:{x:0,y:0},stump:{x:0,y:0}};
        let keys = Object.keys(moveables);
        for(let i in keys)
        {
            let key = keys[i];
            let object = moveables[key];
            let rect = moveables[key].getBoundingClientRect();
            objectPositions[key] = {x:rect.left,y:rect.top};
        }
        let height = header.clientHeight;
        let positions = {start:0,end:-3};
        let scaler = {stump:0.1,mushroom:0.5,snail:0.05};
        let offset;
        let oldPosition = {mushroom:{x:0,y:0},snail:{x:0,y:0},stump:{x:0,y:0}};
        let mousePos = {x:0,y:0};
        let offsetTop = 0;
        document.addEventListener("mousemove",(e)=>
        {
            mousePos.x = e.screenX;
            mousePos.y = e.screenY;
            updateMouse();
        },false);
        function updateMouse()
        {
            for(let i in keys)
            {
                let key = keys[i];
                let object = moveables[key];
                let scale = scaler[key];
                let rect = moveables[key].getBoundingClientRect();
                let normalizedX = (mousePos.x - objectPositions[key].x) / window.innerWidth;
                let normalizedY = (mousePos.y - objectPositions[key].y) / window.innerHeight;
                object.style.transform = stringBuilder(
                                            "translate(",
                                            normalizedX*2*scaler[key],
                                            "em,",
                                            normalizedY*2*scaler[key],
                                            "em)"
                                        );
            }
        }
        function stringBuilder()
        {
            return Array.prototype.join.call(arguments, '');
        }
    </script>
    </body>
</html>